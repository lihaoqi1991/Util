/// Horizontal, vertical or absolute centering of element within its parent
/// If specified, this mixin will use negative margins based on element's
/// dimensions. Else, it will rely on CSS transforms which have a lesser
/// browser support but are more flexible as they are dimension-agnostic.
///
/// @param {Length | null} $width [null] - Element width
/// @param {Length | null} $height [null] - Element height
///
@mixin center($width: null, $height: null) {
    position: absolute;
    top: 50%;
    left: 50%;

    @if not $width and not $height {
        transform: translate(-50%, -50%);
    } @else if $width and $height {
        width: $width;
        height: $height;
        margin: unquote("#{-($width / 2)} #{0 0} -#{$height / 2}")
    } @else if not $height {
        width: $width;
        margin-left: -($width / 2);
        transform: translateY(-50%);
    } @else {
        height: $height;
        margin-top: -($height / 2);
        transform: translateX(-50%);
    }
}

@mixin test($key, $value) {
    -webkit-#{$key}: $value;
    -ms-#{$key}: $value;
}

.a {
    @include test(height, 500px);
}
/**
 * 为子元素设定定位上下文
 */
.parent {
    position: relative;
}

/**
 * 让子元素绝对居中于父容器
 * 没有向 Sass mixin 传递参数，使用 CSS transform 属性实现居中效果
 */
.child-with-unknown-dimensions {
    @include center;
}

/**
 * 让子元素绝对居中于父容器
 * 向 Sass mixin 传递了宽度，所以就使用负向 margin 处理水平位置，
 * 使用 CSS transform 处理垂直位置
 */
.child-with-known-width {
    @include center(400px);
}

/**
 * 让子元素绝对居中于父容器
 * 向 Sass mixin 传递了高度，所以就使用负向 margin 处理垂直位置，
 * 使用 CSS transform 处理水平位置
 */
.child-with-known-height {
    @include center($height: 400px);
}

/**
 * 让子元素绝对居中于父容器
 * 向 Sass mixin 传递了高度和宽度，所以就使用负向 margin 处理水平和垂直位置
 */
.child-with-known-dimensions {
    @include center(400px, 400px);
}

//http://www.w3cplus.com/preprocessor/centering-with-sass.html